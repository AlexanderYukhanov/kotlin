package

public fun box(): kotlin.String
public fun builder(/*0*/ c: suspend () -> kotlin.Unit): kotlin.Unit
public suspend fun </*0*/ T : () -> kotlin.String> testIntersection(/*0*/ x: T): kotlin.String where T : (kotlin.Int) -> kotlin.String
public suspend fun useSuspendFun(/*0*/ fn: suspend () -> kotlin.String): kotlin.String
public suspend fun useSuspendFunInt(/*0*/ fn: suspend (kotlin.Int) -> kotlin.String): kotlin.String

public final class Test : () -> kotlin.String, (kotlin.Int) -> kotlin.String {
    public constructor Test()
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun invoke(): kotlin.String
    public open override /*1*/ fun invoke(/*0*/ p: kotlin.Int): kotlin.String
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}
